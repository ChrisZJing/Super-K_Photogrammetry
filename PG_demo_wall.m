% 3D Stereoscopic Photogrammtery Demonstration with UBC Pool Wall Photos
% Date of Last Edition: April 8, 2020
% Author: Chris Jing 
% Credit: Nick Prouse 
% Project: Precision Calibration of the Super-K Detector

addpath '/Users/JZC/Documents/MATLAB/Examples/R2019b/vision/StructureFromMotionFromMultipleViewsExample'

% Load the camera intrinsics from a completed of calibration session
data = load('/Users/JZC/Desktop/calibration_selection/demo_032420/underwater_rov_calibration_3_coeff_remove_1_pixel');
camIntrinsics = data.calibrationSession.CameraParameters.Intrinsics  
nimages = 6;

image_set = cell(1, nimages);  % cell used to store undistorted images


% Undistort the set of images, save and show in Figure Viewer
for i = 1:nimages
    [undistImage, newOrigin] = undistortImage(readimage(imds, i), camIntrinsics);
    image_set{i} = imshow(undistImage);
    imwrite(undistImage,sprintf('undistorted_image_%d.png',i));
end  

% Define imagePoints to store the coordinates of feature points in undistorted imgaes 
imagePoints = cell(1, nimages);
%             A B C D E J
imageOrder = [6,5,4,3,2,1]; % the order at which to process each image, with image J processed first.

% Image A
imagePoints{imageOrder(1)} = ...
                   [2100, 150; ...
                    2092, 319; ...
                    2079, 588; ...
                    2256, 156; ...
                    2182, 1436; ...
                    2134, 2302; ...
                    2516, 162; ...
                    2505, 329; ...
                    2485, 601; ...
                    2419, 1449; ...
                    2356, 2316; ...
                    2660, 334; ...
                    2636, 602];

% Image B
imagePoints{imageOrder(2)} = ...
                   [1825, 1236; ...
                    1819, 1345; ...
                    1811, 1526; ...
                    1934, 1242; ...
                    1928, 1350; ...
                    1920, 1530; ...
                    1891, 2156; ...
                    1858, 2915; ...
                    2114, 1252; ...
                    2110, 1358; ...
                    2102, 1540; ...
                    2076, 2164; ...
                    2045, 2924; ...
                    2218, 1363; ...
                    2211, 1544; ...
                    3578, 1603; ...
                    3684, 1322; ...
                    3684, 1428; ...
                    3684, 1607; ...
                    3684, 2225; ...
                    3686, 2979; ...
                    3859, 1332; ...
                    3858, 1438; ...
                    3858, 1617; ...
                    3863, 2234; ...
                    3873, 2985; ...
                    3962, 1335; ...
                    3964, 1443; ...
                    3965, 1619];

% Image C                
imagePoints{imageOrder(3)} = ...
                   [1064, 1180; ...
                    1057, 1291; ...
                    1043, 1480; ...
                    1176, 1185; ...
                    1169, 1297; ...
                    1156, 1484; ...
                    1114, 2135; ...
                    1063, 2928; ...
                    1364, 1195; ...
                    1358, 1307; ...
                    1348, 1495; ...
                    1307, 2145; ...
                    1260, 2938; ...
                    1472, 1312; ...
                    1460, 1500; ...
                    2897, 1380; ...
                    2894, 1566; ...
                    3010, 1272; ...
                    3008, 1385; ...
                    3005, 1570; ...
                    2994, 2213; ...
                    2986, 2999; ...
                    3197, 1283; ...
                    3195, 1392; ...
                    3193, 1580; ...
                    3184, 2223; ...
                    3307, 1287; ...
                    3304, 1398; ...
                    3303, 1584];
                
% Image D                
imagePoints{imageOrder(4)} = ...
                   [1872, 944; ...
                    1868, 1034; ...
                    1862, 1188; ...
                    1964, 949; ...
                    1961, 1040; ...
                    1954, 1191; ...
                    1934, 1720; ...
                    1910, 2358; ...
                    2117, 957; ...
                    2114, 1048; ...
                    2109, 1199; ...
                    2091, 1726; ...
                    2071, 2363; ...
                    2206, 1053; ...
                    2200, 1204; ...
                    3329, 1110; ...
                    3330, 1257; ...
                    3416, 1025; ...
                    3416, 1113; ...
                    3417, 1262; ...
                    3419, 1769; ...
                    3424, 2387; ...
                    3559, 1033; ...
                    3560, 1122; ...
                    3561, 1268; ...
                    3563, 1775; ...
                    3572, 2388; ...
                    3647, 1039; ...
                    3644, 1126; ...
                    3646, 1272];
                
 % Image E                
imagePoints{imageOrder(5)} = ...
                   [1783, 60; ...
                    1777, 145; ...
                    1769, 287; ...
                    1638, 2710; ...
                    1871, 71; ...
                    1866, 154; ...
                    1857, 297; ...
                    1829, 790; ...
                    1798, 1389; ...
                    1764, 2072; ...
                    1734, 2710; ...
                    2019, 86; ...
                    2014, 170; ...
                    2007, 313; ...
                    1981, 803; ...
                    1952, 1399; ...
                    1921, 2077; ...
                    1892, 2715; ...
                    2100, 179; ...
                    2094, 321; ...
                    3152, 298; ...
                    3151, 433; ...
                    3231, 308; ...
                    3230, 442; ...
                    3223, 906; ...
                    3218, 1474; ...
                    3212, 2117; ...
                    3206, 2717; ...
                    3364, 243; ...
                    3361, 321; ...
                    3361, 457; ...
                    3358, 917; ...
                    3354, 1481; ...
                    3352, 2121; ...
                    3349, 2720; ...
                    3440, 251; ...
                    3439, 332; ...
                    3439, 462; ...
                    3438, 2723];
                
   % Image J                       
  imagePoints{imageOrder(6)} = ...
                   [1082, 1821; ...
                    1209, 509; ...
                    1190, 1206; ...
                    1175, 1825; ...
                    1365, 513; ...
                    1345, 1211; ...
                    1328, 1833; ...
                    2767, 551; ...
                    2733, 1258; ...
                    2700, 1885; ...
                    2928, 553; ...
                    2894, 1263; ...
                    2858, 1891; ...
                    2956, 1896];              
                
% Input the index pairs of matching feature points in all n images 
% For example: IndexPairs {i, j} = [1,1; 2,2; 3,3], etc.
indexPairs = cell(nimages, nimages);
indexPairs{imageOrder(1),imageOrder(2)} = ...
                   [1, 1; ...
                    2, 2; ...
                    3, 3; ...
                    4, 4; ...
                    5, 7; ...
                    6, 8; ...
                    7, 9; ...
                    8, 10; ...
                    9, 11; ...
                    10, 12; ...
                    11, 13; ...
                    12, 14; ...
                    13, 15];

indexPairs{imageOrder(1),imageOrder(3)} = ...
                   [1, 1; ...
                    2, 2; ...
                    3, 3; ...
                    4, 4; ...
                    5, 7; ...
                    6, 8; ...
                    7, 9; ...
                    8, 10; ...
                    9, 11; ...
                    10, 12; ...
                    11, 13; ...
                    12, 14; ...
                    13, 15];

indexPairs{imageOrder(1),imageOrder(4)} = ...
                   [1, 1; ...
                    2, 2; ...
                    3, 3; ...
                    4, 4; ...
                    5, 7; ...
                    6, 8; ...
                    7, 9; ...
                    8, 10; ...
                    9, 11; ...
                    10, 12; ...
                    11, 13; ...
                    12, 14; ...
                    13, 15];

indexPairs{imageOrder(1),imageOrder(5)} = ...
                   [1, 1; ...
                    2, 2; ...
                    3, 3; ...
                    4, 5; ...
                    5, 8; ...
                    6, 9; ...
                    7, 12; ...
                    8, 13; ...
                    9, 14; ...
                    10, 15; ...
                    11, 16; ...
                    12, 19; ...
                    13, 20];

indexPairs{imageOrder(1),imageOrder(6)} = ...
                   [6,	2; ...
                    11,	5];                
                
indexPairs{imageOrder(2),imageOrder(3)} = ...
                   [1, 1; ...
                    2, 2; ...
                    3, 3; ...
                    4, 4; ...
                    5, 5; ...
                    6, 6; ...
                    7, 7; ...
                    8, 8; ...
                    9, 9; ...
                    10, 10; ...
                    11, 11; ...
                    12, 12; ...
                    13, 13; ...
                    14, 14; ...
                    15, 15; ...
                    16, 17; ...
                    17, 18; ...
                    18, 19; ...
                    19, 20; ...
                    20, 21; ...
                    21, 22; ...
                    22, 23; ...
                    23, 24; ...
                    24, 25; ...
                    25, 26; ...
                    27, 27; ...
                    28, 28; ...
                    29, 29];

indexPairs{imageOrder(2),imageOrder(4)} = ...
                   [1, 1; ...
                    2, 2; ...
                    3, 3; ...
                    4, 4; ...
                    5, 5; ...
                    6, 6; ...
                    7, 7; ...
                    8, 8; ...
                    9, 9; ...
                    10, 10; ...
                    11, 11; ...
                    12, 12; ...
                    13, 13; ...
                    14, 14; ...
                    15, 15; ...
                    16, 17; ...
                    17, 18; ...
                    18, 19; ...
                    19, 20; ...
                    20, 21; ...
                    21, 22; ...
                    22, 23; ...
                    23, 24; ...
                    24, 25; ...
                    25, 26; ...
                    26, 27; ...
                    27, 28; ...
                    28, 29; ...
                    29, 30];

indexPairs{imageOrder(2),imageOrder(5)} = ...
                   [1, 1; ...
                    2, 2; ...
                    3, 3; ...
                    4, 5; ...
                    5, 6; ...
                    6, 7; ...
                    7, 8; ...
                    8, 9; ...
                    9, 12; ...
                    10, 13; ...
                    11, 14; ...
                    12, 15; ...
                    13, 16; ...
                    14, 19; ...
                    15, 20; ...
                    16, 22; ...
                    18, 23; ...
                    19, 24; ...
                    20, 25; ...
                    21, 26; ...
                    22, 29; ...
                    23, 30; ...
                    24, 31; ...
                    25, 32; ...
                    26, 33; ...
                    27, 36; ...
                    28, 37; ...
                    29, 38];
                
indexPairs{imageOrder(2),imageOrder(6)} = ...
                   [8, 2; ...
                    13, 5; ...
                    21, 8; ...
                    26, 11];
                
indexPairs{imageOrder(3),imageOrder(4)} = ...
                   [1, 1; ...
                    2, 2; ...
                    3, 3; ...
                    4, 4; ...
                    5, 5; ...
                    6, 6; ...
                    7, 7; ...
                    8, 8; ...
                    9, 9; ...
                    10, 10; ...
                    11, 11; ...
                    12, 12; ...
                    13, 13; ...
                    14, 14; ...
                    15, 15; ...
                    16, 16; ...
                    17, 17; ...
                    18, 18; ...
                    19, 19; ...
                    20, 20; ...
                    21, 21; ...
                    22, 22; ...
                    23, 23; ...
                    24, 24; ...
                    25, 25; ...
                    26, 26; ...
                    27, 28; ...
                    28, 29; ...
                    29, 30];

indexPairs{imageOrder(3),imageOrder(5)} = ...
                   [1, 1; ...
                    2, 2; ...
                    3, 3; ...
                    4, 5; ...
                    5, 6; ...
                    6, 7; ...
                    7, 8; ...
                    8, 9; ...
                    9, 12; ...
                    10, 13; ...
                    11, 14; ...
                    12, 15; ...
                    13, 16; ...
                    14, 19; ...
                    15, 20; ...
                    16, 21; ...
                    17, 22; ...
                    19, 23; ...
                    20, 24; ...
                    21, 25; ...
                    22, 26; ...
                    23, 29; ...
                    24, 30; ...
                    25, 31; ...
                    26, 32; ...
                    27, 36; ...
                    28, 37; ...
                    29, 38];
                
indexPairs{imageOrder(3),imageOrder(6)} = ...
                   [8, 2; ...
                    13, 5; ...
                    22, 8];
                
indexPairs{imageOrder(4),imageOrder(5)} = ...
                   [1, 1; ...
                    2, 2; ...
                    3, 3; ...
                    4, 5; ...
                    5, 6; ...
                    6, 7; ...
                    7, 8; ...
                    8, 9; ...
                    9, 12; ...
                    10, 13; ...
                    11, 14; ...
                    12, 15; ...
                    13, 16; ...
                    14, 19; ...
                    15, 20; ...
                    16, 21; ...
                    17, 22; ...
                    19, 23; ...
                    20, 24; ...
                    21, 25; ...
                    22, 26; ...
                    23, 29; ...
                    24, 30; ...
                    25, 31; ...
                    26, 32; ...
                    27, 33; ...
                    28, 36; ...
                    29, 37; ...
                    30, 38];
                
indexPairs{imageOrder(4),imageOrder(6)} = ...
                   [8, 2; ...
                    13, 5; ...
                    22, 8; ...
                    27, 11];
                
indexPairs{imageOrder(5),imageOrder(6)} = ...
                   [4, 1; ...
                    9, 2; ...
                    10, 3; ...
                    11, 4; ...
                    16, 5; ...
                    17, 6; ...
                    18, 7; ...
                    26, 8; ...
                    27, 9; ...
                    28, 10; ...
                    33, 11; ...
                    34, 12; ...
                    35, 13; ...
                    39, 14];
                
% Match the values in indexPairs{j,i} and indexPairs{i, j} for consistency         
for i = 2:nimages
    for j = 1:(i-1)
        if(isempty(indexPairs{i,j})==false)
            indexPairs{j,i} = indexPairs{i,j}(:,[2 1]);
        end
    end
end

vSet = viewSet;
viewId = 1;
vSet = addView(vSet, viewId, 'Points', imagePoints{1}, ...
               'Orientation', eye(3, 'like', imagePoints{1}), 'Location', ...
               zeros(1, 3, 'like', imagePoints{1})); 

% 3D reconstruction begins (calculate best fit for 3D position) 
% Based on MATLAB's built in SfM template: StructureFromMotionFromMultipleViewsExample.mlx
for i = 2:nimages
    fprintf("adding image %d\n", i);
    if(isempty(indexPairs{i-1, i})==false) 
        disp('initial estimate')
        matchedPoints1 = imagePoints{i-1}(indexPairs{i-1, i}(:, 1),:);
        matchedPoints2 = imagePoints{i}(indexPairs{i-1, i}(:, 2),:);
        [relativeOrient, relativeLoc, inlierIdx] = helperEstimateRelativePose(matchedPoints1, matchedPoints2, camIntrinsics);
    else
        fprintf("WARNING: No connections between %d and %d\n", i-1, i);
    end
    
    vSet = addView(vSet, i, 'Points', imagePoints{i});
    for j=1:(i-1)
        if(isempty(indexPairs{j,i})==false)
            fprintf("Adding connections from image %d to %d\n", j, i);
            vSet = addConnection(vSet, j, i, 'Matches', indexPairs{j,i});
        end
    end

    prevPose = poses(vSet, i-1);
    prevOrientation = prevPose.Orientation{1};
    prevLocation    = prevPose.Location{1};
    orientation = relativeOrient * prevOrientation;
    location    = prevLocation + relativeLoc * prevOrientation;
    vSet = updateView(vSet, i, 'Orientation', orientation, 'Location', location);

    tracks = findTracks(vSet);
    camPoses = poses(vSet);
    xyzPoints = triangulateMultiview(tracks, camPoses, camIntrinsics);
    [xyzPoints, camPoses, reprojectionErrors] = bundleAdjustment(xyzPoints, tracks, camPoses, camIntrinsics, 'FixedViewId', 1, ...
        'PointsUndistorted', true, 'MaxIterations', 300, 'AbsoluteTolerance', 0.4, 'RelativeTolerance', 1e-10, 'Verbose', true);
    vSet = updateView(vSet, camPoses);  
end     

vSet = updateView(vSet, camPoses);
% A quick plot of the unprocessed xyzPoints in a 3D diagram
plot3(xyzPoints(:,1),xyzPoints(:,2),xyzPoints(:,3), 'o')

% Add feature point numbers next to the xyzPoints 
% (mapped to their corresponding index number in truePoints)
indices = linspace(1,40,40)
plot3(xyzPoints(:,1),xyzPoints(:,2),xyzPoints(:,3), 'bo')
hold on
text(xyzPoints(:,1),xyzPoints(:,2),xyzPoints(:,3), string(indices),'Color','red','FontSize',12)

% Column 1: truePoints indices; Column 2: xyzPoints indices               
indexMapping = [1,	37;
                2,	38;
                3,	39;
                4,	14;
                5,	33;
                6,	34;
                7,	35;
                8,	36;
                9,	11;
                10,	12;
                11,	13;
                12,	40;
                13,	30;
                14,	31;
                15,	32;
                16,	8;
                17,	9;
                18,	10;
                19,	28;
                20,	29;
                21,	26;
                22,	27;
                23,	22;
                24,	23;
                25,	24;
                26,	25;
                27,	5;
                28,	6;
                29,	7;
                30,	18;
                31,	19;
                32,	20;
                33,	21;
                34,	2;
                35,	3;
                36,	4;
                37,	15;
                38,	16;
                39,	17;
                40,	1]

% Rearrange the order at which xyzPoints were recorded to match the 
% order of the feature points in truePoints
xyzPointsOrdered = zeros(40:3)  
for i = 1:40
    xyzPointsOrdered(i,:) = xyzPoints(indexMapping(i,2), :)
end   

% Define the real world coordinates of the feature points (in mm)
truePoints =   [0, 4419.6,0; ...
                0, 4267.2,0; ...
                0, 4013.2,0; ...
                0, 0,0; ...
                152.4, 4419.6,0; ...
                152.4, 4267.2,0; ...
                152.4, 4013.2,0; ...
                152.4, 3149.6,0; ...
                152.4, 2133.6,0; ...
                152.4, 1016,0; ...
                152.4, 0,0; ...
                406.4, 4419.6,0; ...
                406.4, 4267.2,0; ...
                406.4, 4013.2,0; ...
                406.4, 3149.6,0; ...
                406.4, 2133.6,0; ...
                406.4, 1016,0; ...
                406.4, 0,0; ...
                558.8, 4267.2,0; ...
                558.8, 4013.2,0; ...
                2489.2, 4267.2,0; ...
                2489.2, 4013.2,0; ...
                2641.6, 4419.6,0; ...
                2641.6, 4267.2,0; ...
                2641.6, 4013.2,0; ...
                2641.6, 3149.6,0; ...
                2641.6, 2133.6,0; ...
                2641.6, 1016,0; ...
                2641.6, 0,0; ...
                2895.6, 4419.6,0; ...
                2895.6, 4267.2,0; ...
                2895.6, 4013.2,0; ...
                2895.6, 3149.6,0; ...
                2895.6, 2133.6,0; ...
                2895.6, 1016,0; ...
                2895.6, 0,0; ...
                3048, 4419.6,0; ...
                3048, 4267.2,0; ...
                3048, 4013.2,0; ...
                3048, 0,0];
 
 % Option 1: Find rotation matrix using Kabsch algorithm
translatedPoints = xyzPointsOrdered - mean(xyzPointsOrdered);
translatedTruePoints = truePoints - mean(truePoints);
C=translatedPoints'*translatedTruePoints/size(translatedTruePoints,1);
[V,S,W] = svd(C);
I = eye(3);
if (det(V*W') < 0)
    I(3,3) = -1;
end
U = W*I*V';
scale = trace(S*I)/sum(var(translatedPoints));
transformedPoints = translatedPoints*U'*scale;
errors_kabsch = transformedPoints - translatedTruePoints;
mean_distance_errors_kabsch = mean(vecnorm(errors_kabsch,2,2))

 % Option 2: Find rotation matrix using Proscrustes Analysis Method
[d,prosTransformedPoints,transform] = procrustes(truePoints, xyzPointsOrdered)
errors_procrustes = prosTransformedPoints - truePoints
mean_distance_errors_procrustes = mean(vecnorm(errors_procrustes,2,2))

% Codes below are for visualization of the errors anf the 3D fit

% Plot the feature point (circled) on the undistorted image
imds = imageDatastore('/Users/JZC/Desktop/calibration_selection/Forbes_0324/photogrammetry_selection/pinhole_undistorted')
i=1; % change from 1 to 6
imshow(readimage(imds, 10));
hold on;
plot(imagePoints{imageOrder(i)}(:,1), imagePoints{imageOrder(i)}(:,2),'go');
hold off;

% Make a plo of 3D errors
histogram(vecnorm(errors_procrustes,2,2), 10,'DisplayStyle','stairs');
ylim([0 20]);
xlim([0 70]);
title(sprintf('Wall Pattern: 3D Reconstructed Position Error\n (6 images, 40 points), mean = %.2f mm', mean(vecnorm(errors_procrustes,2,2))));
ylabel('Count of Feature Points');
xlabel('3D Reconstructed Position Error [mm]');
set(gca,'FontSize',14);

% Make a plo of 3D errors (in z-direction)
histogram(errors_procrustes(:,3), 10,'DisplayStyle','stairs');
ylim([0 20]);
xlim([-70 70]);
title(sprintf('Wall Pattern: z Position Error\n (6 images, 40 points), RMS deviation = %.2f mm', std(errors_procrustes(:,3))));
ylabel('Count of Feature Points');
xlabel('z position error (height direction) [mm]');
set(gca,'FontSize',14);

% Make a plo of 3D errors (in x-direction)
histogram(errors_procrustes(:,1), 10,'DisplayStyle','stairs');
ylim([0 20]);
xlim([-70 70]);
title(sprintf('Wall Pattern: x Position Error\n (6 images, 40 points), RMS deviation = %.2f mm', std(errors_procrustes(:,1))));
ylabel('Count of Feature Points');
xlabel('x position error (length direction) [mm]');
set(gca,'FontSize',14);

% Make a plo of 3D errors (in y-direction)
histogram(errors_procrustes(:,2), 10,'DisplayStyle','stairs');
ylim([0 20]);
xlim([-70 70]);
title(sprintf('Wall Pattern: y Position Error\n (6 images, 40 points), RMS deviation = %.2f mm', std(errors_procrustes(:,2))));
ylabel('Count of Feature Points');
xlabel('y position error (width direction) [mm]');
set(gca,'FontSize',14);


% Pattern Reconstruction
tile_size = 50.80 % [mm]
[X,Y] = meshgrid(linspace(0,60*tile_size,1+6), linspace(0,90*tile_size,1+9));
Z = zeros(size(X));
[X2,Y2] = meshgrid(linspace(0,60*tile_size,1+6*10), linspace(0,90*tile_size,1+9*10));
Z2 = zeros(size(X2));
figure(1)
scatter3(prosTransformedPoints(:,1),prosTransformedPoints(:,2),prosTransformedPoints(:,3),ones(size(prosTransformedPoints(:,3)))*30,"b","filled")
hold on
scatter3(truePoints(:,1),truePoints(:,2),truePoints(:,3),ones(size(truePoints(:,3)))*30,"r","filled")
a = get(gca,'Clim');
mesh(Z, Y, X, 'LineStyle', '-', 'FaceColor', 'none', 'EdgeColor', [0.5 0.5 0.5])
mesh(Z2, Y2, X2, 'LineStyle', '-', 'FaceColor', 'none', 'EdgeColor', [0.5 0.5 0.5], 'EdgeAlpha', 0.5)
%plot3(transformedPoints(:,1),transformedPoints(:,2),transformedPoints(:,3),'.')
zlim([-10, 3100])
ylim([-10 4600])
xlim([-1000 1000])
set(gca,'Clim',a);
title('Measured Feature Points and 3D Reconstruted Points Positions (6 images, 40 points)');
set(gca,'FontSize',14);
hold off

% Pattern Reconstruction
tile_size = 50.80 % [mm]
[X,Y] = meshgrid(linspace(0,90*tile_size,1+9), linspace(0,60*tile_size,1+6));
Z = zeros(size(X));
[X2,Y2] = meshgrid(linspace(0,90*tile_size,1+9*5), linspace(0,60*tile_size,1+6*5));
Z2 = zeros(size(X2));
figure(1);
scatter3(prosTransformedPoints(:,3),prosTransformedPoints(:,1),prosTransformedPoints(:,2),ones(size(prosTransformedPoints(:,3)))*30,"b","filled");
hold on;
scatter3(truePoints(:,3),truePoints(:,1),truePoints(:,2),ones(size(truePoints(:,1)))*30,"r","filled");
%legend([{'3D Reconstructed Positions'},{'Measured True Positions'}, {}, {}])
a = get(gca,'Clim');
mesh(Z, Y, X, 'LineStyle', '-', 'FaceColor', 'none', 'EdgeColor', [0.5 0.5 0.5])
mesh(Z2, Y2, X2, 'LineStyle', '-', 'FaceColor', 'none', 'EdgeColor', [0.5 0.5 0.5], 'EdgeAlpha', 0.5)
ylim([-10, 3100]);
zlim([-10 4600]);
xlim([-300 300]);
xticks([-300 -200 -100 0 100 200 300]);
ylabel('Count of Feature Points');
xlabel('Length Direction [mm]');
ylabel('Width Direction [mm]');
zlabel('Height Direction [mm]');
set(gca,'Clim',a);
title(sprintf('Measured Feature Points (red) and 3D Reconstructed Points (blue)\n Positions (6 images, 40 points), mean error = %.2f mm', 19.40));
set(gca,'FontSize',14);
hold off

